{"version":3,"sources":["../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Commons/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Commons/apic.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Commons/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Commons/gameDate.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Modules/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Modules/item_poker.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/manage_event.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/manage_poker.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/manage_pool.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/manage_res.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/manager_ai.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Manages/manager_game.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Tools/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Tools/mathematics.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Modules/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Modules/scene_main.ts","../../file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Tools/file:/E:/Cocos/2.22/TrucoPokerGamePull/CocosProject/assets/scripte/Tools/singleton.ts"],"names":["apic","resMg","manage_res","GetInstance","poolMg","manage_pool","gameMg","manager_game","pokerMg","manage_poker","aiMg","manager_ai","gameDate","gameScore_change","gameScore_init","ccclass","property","_decorator","Component","constructor","itemInfo","onLoad","onEnable","node","on","Node","EventType","TOUCH_START","this","_touchStarHandel","start","loadRes","then","updateView","changeData","data","update","deltaTime","lateUpdate","onDisable","off","updatePokerInfo","unscheduleAllCallbacks","parent","name","parseInt","split","scheduleOnce","manage_event","event","emit","__eventAiFunc","itemSpriteFrame","spriteFrames","getComponent","Sprite","spriteFrame","getSpriteFrame","onDestroy","decRef","console","log","refCount","assetManager","assets","EventTarget","Singleton","pokerArr","pokerBlue","pokerRed","init","length","count","flowerColor","poker","push","enemyPrefab","enemyPool","initPool","initCount","NodePool","i","enemy","instantiate","put","createEnemy","size","get","pullEnemy","otherSpriteFrames","loadBundleRes","Promise","resolve","reject","loadBundle","err","bundle","load","SpriteFrame","addRef","removeBundleRes","$bundleName","getBundle","removeBundle","releaseBundleResOnce","$releasetype","$isRemoveBundle","$resName","$resType","release","releaseAll","loadOtherRes","resources","SpriteAtlas","error","loadPokerRes","loadPokerPre","Prefab","pre","fanxing","value","aiInfo","score","avatar","adree","aiDrawCard","pokerIndex","mathematics","randomNum","itemPokerPre","itemPokerNode","playerInfo","isGameFinish","catch","createrPoker","removePoker","maxnum","minnum","Number","Math","floor","random","btn_star","btn_finish","btn_nextGame","layout_bule","layout_red","item_poker","avatar_red","avatar_bule","bule_laber","red_laber","bule_head","red_head","playerAct","initView","find","Button","getChildByName","Label","onClickHandel","__eventPlayerFunc","updateDate","string","interactable","gameStar","gameFinish","removeAllChildren","index","indexOf","pocker","splice","cardNode","$node","indexId","isPush","pockerName","element","elementCard","children","gameOver","playerCard","showPoker","pokerCard","pokerRedElement","c","instance","dir"],"mappings":"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","file":"all.js","sourcesContent":["import manager_ai from \"../Manages/manager_ai\";\r\nimport manager_game from \"../Manages/manager_game\";\r\nimport manage_poker from \"../Manages/manage_poker\";\r\nimport manage_pool from \"../Manages/manage_pool\";\r\nimport manage_res from \"../Manages/manage_res\";\r\n\r\nexport default class apic{\r\n    public static resMg = manage_res.GetInstance(manage_res);\r\n    public static poolMg = manage_pool.GetInstance(manage_pool);\r\n    public static gameMg = manager_game.GetInstance(manager_game);\r\n    public static pokerMg = manage_poker.GetInstance(manage_poker);\r\n    public static aiMg = manager_ai.GetInstance(manager_ai);\r\n}","export class gameDate{\r\n    /**游戏得分 */\r\n    public static gameScore_change: number = 10;\r\n    /**初始分数 */\r\n    public static gameScore_init: number = 0;\r\n    \r\n}","import { assetManager } from 'cc';\r\nimport { _decorator, Component, Node, SpriteFrame, Sprite, tween, Quat, quat, game } from 'cc';\r\nimport { NodeEventType } from '../../../@types/packages/scene/@types/cce/public/event-enum';\r\nimport apic from '../Commons/apic';\r\nimport manager_game from '../Manages/manager_game';\r\nimport { manage_event } from '../Manages/manage_event';\r\nimport { IPokerInfo } from '../Tools/interface';\r\nimport mathematics from '../Tools/mathematics';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('item_poker')\r\nexport class item_poker extends Component {\r\n\r\n    public itemInfo: string =  'poker';\r\n   \r\n    onLoad() {\r\n       \r\n    }\r\n    onEnable() {\r\n        \r\n        this.node.on(Node.EventType.TOUCH_START, this._touchStarHandel, this);\r\n        // manage_event.event.on('ai_act', this.__eventAiFunc, this);\r\n    }\r\n    start() {\r\n        //\r\n        apic.gameMg.loadRes().then(()=>{this.updateView();});\r\n        \r\n    }\r\n\r\n    public changeData(data:string) {\r\n        this.itemInfo = data;\r\n    }\r\n    update(deltaTime: number) {\r\n    \r\n    }\r\n    lateUpdate() {\r\n        \r\n    }\r\n    onDisable() {\r\n        this.node.off(Node.EventType.TOUCH_START, this._touchStarHandel, this);\r\n        // manage_event.event.off('ai_act', this.__eventAiFunc, this);\r\n        this.updatePokerInfo('poker');\r\n        this.unscheduleAllCallbacks();\r\n    }\r\n\r\n    private _touchStarHandel() {\r\n        if (this.node.parent.name != 'layout_bule') return;\r\n      \r\n        \r\n        // console.log(this.itemInfo);\r\n        let count: number = parseInt(this.itemInfo.split(\"-\")[0]);\r\n        let flowerColor: number = parseInt(this.itemInfo.split(\"-\")[1]);\r\n        this.updatePokerInfo(this.itemInfo);\r\n        this.scheduleOnce(() => { \r\n            manage_event.event.emit('palyer_act', this.node);\r\n            \r\n        }, 0.3);\r\n       \r\n       \r\n    }\r\n\r\n    private __eventAiFunc() { \r\n        this.node.on(Node.EventType.TOUCH_START, this._touchStarHandel, this);\r\n    }\r\n    private updateView() {\r\n       \r\n        // if (this.node.parent.name != 'layout_bule') {\r\n            \r\n        //     this.updatePokerInfo(this.itemInfo)\r\n        // }\r\n    }\r\n\r\n    private updatePokerInfo(itemSpriteFrame:string)\r\n    {\r\n        if (!apic.resMg.spriteFrames) return;\r\n        this.node.getComponent(Sprite).spriteFrame = apic.resMg.spriteFrames.getSpriteFrame(itemSpriteFrame);\r\n    }\r\n    onDestroy() {\r\n        /**移除时减少计数 */\r\n        this.node.getComponent(Sprite).spriteFrame.decRef();\r\n        console.log(\"spriteFrame.refCount : \" + this.node.getComponent(Sprite).spriteFrame.refCount);\r\n        /**初始化组件 */\r\n        this.node.getComponent(Sprite).spriteFrame = null;\r\n\r\n        //在下一帧打印 assets\r\n        this.scheduleOnce(()=>{\r\n            console.log(assetManager.assets);\r\n        });\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","import { EventTarget } from \"cc\";\r\n\r\nexport class manage_event{\r\n    public static event = new EventTarget();\r\n\r\n}","import { Prefab } from \"cc\";\r\nimport { Singleton } from \"../Tools/singleton\";\r\n\r\nexport default class manage_poker extends Singleton<manage_poker> {\r\n    public pokerArr: string[] = [];\r\n    public pokerBlue: string[] = [];\r\n    public pokerRed: string[] = [];\r\n    public init(): void {\r\n        this.pokerArr.length = 0;\r\n        this.pokerBlue.length = 0;\r\n        this.pokerRed.length = 0;\r\n       \r\n        for (let count = 1; count < 14; count++) {\r\n            for (let flowerColor = 1; flowerColor < 5; flowerColor++) {\r\n                let poker = count + '-' + flowerColor;\r\n                this.pokerArr.push(poker);\r\n            }\r\n        }\r\n    }\r\n   \r\n}\r\n\r\n\r\n","import { instantiate, Node, NodePool, Prefab } from \"cc\";\r\nimport { Singleton } from \"../Tools/singleton\";\r\n\r\nexport default class manage_pool extends Singleton<manage_pool>{\r\n    public enemyPrefab: Prefab = null;\r\n    public enemyPool: NodePool = null;\r\n    public init(): void {\r\n        this.enemyPrefab = null;\r\n        this.enemyPool = null;\r\n    }\r\n    /**初始化对象池 */\r\n    public initPool(initCount: number = 5) {\r\n        this.enemyPool = new NodePool();\r\n        for (let i = 0; i < initCount; ++i) {\r\n            let enemy = instantiate(this.enemyPrefab); // 创建节点\r\n            this.enemyPool.put(enemy); // 通过 put 接口放入对象池\r\n        }\r\n    }\r\n    /** createEnemy 从对象池请求对象*/\r\n    public createEnemy() {\r\n        let enemy:Node = null;\r\n        if (this.enemyPool.size() > 0) { // 通过 size 接口判断对象池中是否有空闲的对象\r\n            // get()获取对象\r\n            enemy = this.enemyPool.get();\r\n            \r\n        } else { // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\r\n            enemy = instantiate(this.enemyPrefab);\r\n        }\r\n        return enemy;\r\n        // enemy.parent = parentNode; // 将生成的敌人加入节点树\r\n        // enemy.getComponent(this.enemyPrefab.name).init(); //接下来就可以调用 enemy 身上的脚本进行初始化\r\n    }\r\n    /** 将对象返回对象池*/\r\n    public pullEnemy(enemy:Node) {\r\n        // enemy 应该是一个 cc.Node\r\n        this.enemyPool.put(enemy); // 和初始化时的方法一样，将节点放进对象池，这个方法会同时调用节点的 removeFromParent\r\n    }\r\n\r\n    \r\n}","import { Prefab, Sprite, SpriteAtlas } from \"cc\";\r\nimport { assetManager } from \"cc\";\r\nimport { AssetManager, SpriteFrame } from \"cc\";\r\nimport { resources } from \"cc\";\r\nimport apic from \"../Commons/apic\";\r\nimport { Singleton } from \"../Tools/singleton\";\r\n\r\nexport default class manage_res extends Singleton<manage_res>{\r\n    public spriteFrames: SpriteAtlas = null;\r\n    public otherSpriteFrames: SpriteAtlas = null;\r\n\r\n    /**动态加载 bundle 目录中的资源 */\r\n    public loadBundleRes() {\r\n        return new Promise<SpriteFrame>((resolve, reject) => {\r\n            assetManager.loadBundle(\"bundle\", (err: Error, bundle: AssetManager.Bundle) => {\r\n                bundle.load(\"HelloWorld\", SpriteFrame, (err, assets: SpriteFrame) => {\r\n                    console.log(assetManager.assets);\r\n                    console.log(\"spriteFrame.refCount : \" + assets.refCount);\r\n                    //增加计数\r\n                    assets.addRef();\r\n                    resolve(assets)\r\n                });\r\n            });\r\n        })\r\n       \r\n    }\r\n    /**在加载了AB包之后，此 bundle 会一直存在整个游戏过程中，除非开发者手动移除\r\n     * 当手动移除了某个不需要的 bundle，那么此 bundle 的缓存也会被移除，如果需要再次使用，则必须再重新加载一次 */\r\n    public removeBundleRes($bundleName: string) {\r\n        let bundle = assetManager.getBundle($bundleName);\r\n        assetManager.removeBundle(bundle);\r\n    }\r\n    /**\r\n     *在移除AB包时，并不会释放该 bundle 中加载过的资源\r\n     *如果需要释放，请先使用AB包的 release / releaseAll 方法：\r\n     * @param {number} $releasetype 释放类型 1：单个资源 2：整个包\r\n     * @param {string} $bundleName  释放AB包名字\r\n     * @param {string} $resName     释放的资源名字\r\n     * @param {(SpriteFrame|Prefab|any)} $resType 释放的资源类型\r\n     * @memberof manage_res\r\n     */\r\n    public releaseBundleResOnce($releasetype:number,$bundleName: string,$isRemoveBundle:boolean=true,$resName?: string, $resType?: SpriteFrame|Prefab|any) {\r\n        // 释放在AB包中的单个资源\r\n        let bundle = assetManager.getBundle($bundleName);\r\n        switch ($releasetype) {\r\n            case 1:\r\n                bundle.release($resName, $resType);\r\n                break;\r\n            case 2:\r\n                 // 释放所有属于AB包的资源\r\n                bundle.releaseAll();\r\n            default:\r\n                break;\r\n        }\r\n        //单个资源时 决定是否释放整个包\r\n        $isRemoveBundle&& assetManager.removeBundle(bundle);\r\n    }\r\n\r\n    public loadOtherRes() {\r\n        return new Promise<void>((resolve, reject) => {\r\n             // textures 目录下的 poker.plist 文件\r\n             resources.load(\"textures/poker2\", SpriteAtlas, (error: Error, assets: SpriteAtlas) => {\r\n                 if (error) reject()\r\n                 assets.addRef();\r\n                 apic.resMg.otherSpriteFrames = assets;\r\n                 \r\n                 resolve();\r\n             })\r\n         })\r\n       \r\n     }\r\n    public loadPokerRes() {\r\n       return new Promise<void>((resolve, reject) => {\r\n            // textures 目录下的 poker.plist 文件\r\n            resources.load(\"textures/poker\", SpriteAtlas, (error: Error, assets: SpriteAtlas) => {\r\n                if(error)reject()\r\n                // let frame = assets.getSpriteFrame(\"sheep_down_0\");\r\n                // this.sprite.spriteFrame = frame;\r\n\r\n                assets.addRef();\r\n                apic.resMg.spriteFrames = assets;\r\n                resolve();\r\n            })\r\n        })\r\n      \r\n    }\r\n\r\n    public loadPokerPre() {\r\n        return new Promise<Prefab>((resolve, reject) => {\r\n             // prefabs 目录下的item_poker\r\n             resources.load(\"prefabs/item_poker\", Prefab, (error: Error, pre: Prefab) => {\r\n                 if (error) reject()\r\n                 pre.addRef();\r\n                 resolve(pre);\r\n             })\r\n         })\r\n       \r\n     }\r\n\r\n    public init(): void {\r\n        \r\n    }\r\n\r\n\r\n    public fanxing<T>(value: T){\r\n        // return value;\r\n    }\r\n\r\n    \r\n}","import apic from \"../Commons/apic\";\r\nimport { IPlayerInfo } from \"../Tools/interface\";\r\nimport mathematics from \"../Tools/mathematics\";\r\nimport { Singleton } from \"../Tools/singleton\";\r\nimport { manage_event } from \"./manage_event\";\r\n\r\nexport default class manager_ai extends Singleton<manager_ai> {\r\n    public aiInfo: IPlayerInfo = null;\r\n   \r\n    public init(): void {\r\n        this.aiInfo = { name: 'kalami', score: 0, avatar: 'bg05', adree: 2 };\r\n        \r\n    }\r\n    /**Ai抽牌 */\r\n    public aiDrawCard() {\r\n        \r\n        let pokerIndex: number = mathematics.randomNum(apic.pokerMg.pokerRed.length, 0);\r\n        manage_event.event.emit('ai_act',pokerIndex);\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { instantiate, Node, Prefab } from \"cc\";\r\nimport apic from \"../Commons/apic\";\r\nimport { item_poker } from \"../Modules/item_poker\";\r\nimport { IPlayerInfo } from \"../Tools/interface\";\r\nimport { Singleton } from \"../Tools/singleton\";\r\n\r\nexport default class manager_game extends Singleton<manager_game> {\r\n    public itemPokerPre: Prefab = null;\r\n    public itemPokerNode: Node[] = [];\r\n    public playerInfo: IPlayerInfo = null;\r\n\r\n    public isGameFinish: boolean = false;\r\n\r\n    /**初始化 */\r\n    public init() {\r\n        this.itemPokerPre = null;\r\n        this.itemPokerNode.length = 0;  \r\n        apic.poolMg.init()\r\n        apic.pokerMg.init();\r\n        apic.aiMg.init();\r\n        this.playerInfo = { name: 'Timtim',score:0,avatar: 'bg05',adree:1};\r\n\r\n    }\r\n    public loadRes() {\r\n        return new Promise<void>((resolve, reject) => {\r\n            apic.resMg.loadPokerPre().then((pre) => {\r\n                this.itemPokerPre = pre;\r\n                apic.poolMg.enemyPrefab = pre;\r\n                apic.poolMg.initPool(11);   \r\n                apic.resMg.loadOtherRes().then(() => {\r\n                    apic.resMg.loadPokerRes().then(() => {\r\n                        resolve()  \r\n                    }).catch(() => {\r\n                    reject()\r\n                    });  \r\n                })\r\n                \r\n            })\r\n           \r\n        })\r\n        \r\n    }\r\n\r\n    public createrPoker() {\r\n        if (!this.itemPokerPre) return;\r\n        // if (this.itemPokerNode.length > 0) this.itemPokerNode.length = 0;\r\n        return  apic.poolMg.createEnemy();\r\n    }\r\n\r\n    public removePoker(enemy: Node) {   \r\n      \r\n        apic.poolMg.pullEnemy(enemy);\r\n    }\r\n}\r\n\r\n\r\n","\r\nimport { Component } from \"cc\";\r\nimport { addPrefabInfo } from \"../../../@types/packages/engine/@types/editor-extends/utils/prefab\";\r\nimport { Singleton } from \"./singleton\";\r\n\r\n\r\nexport default class mathematics extends Singleton<mathematics> {\r\n    public static randomNum(maxnum,minnum){\r\n        if(! (maxnum instanceof Number)||!(minnum instanceof Number) ){\r\n            maxnum=parseInt(maxnum);\r\n            minnum=parseInt(minnum);\r\n        }\r\n        return Math.floor(Math.random()*(maxnum-minnum+1)+minnum);\r\n    }\r\n}","import { Label, Tween, Vec3 } from 'cc';\r\nimport { Sprite } from 'cc';\r\nimport { _decorator, Component, Node, find, Button, UITransform, tween } from 'cc';\r\nimport apic from '../Commons/apic';\r\nimport { gameDate } from '../Commons/gameDate';\r\nimport manager_ai from '../Manages/manager_ai';\r\nimport { manage_event } from '../Manages/manage_event';\r\nimport manage_poker from '../Manages/manage_poker';\r\nimport manage_pool from '../Manages/manage_pool';\r\nimport mathematics from '../Tools/mathematics';\r\nimport { item_poker } from './item_poker';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('scene_main')\r\nexport class scene_main extends Component {\r\n    private btn_star:Button=null;\r\n    private btn_finish:Button=null;\r\n    private btn_nextGame:Button=null;\r\n    private layout_bule: Node=null;\r\n    private layout_red: Node = null;\r\n    private item_poker: Node = null;\r\n\r\n    private avatar_red:Node=null;\r\n    private avatar_bule: Node = null;\r\n    \r\n    private bule_laber: Label = null;\r\n    private red_laber: Label = null;\r\n    private bule_head: Sprite = null;\r\n    private red_head: Sprite = null;\r\n\r\n    private playerAct: boolean = false;\r\n    onLoad() {\r\n      \r\n        apic.gameMg.init();\r\n        this.initView();\r\n        \r\n    }\r\n    private initView(){\r\n        this.btn_star=find('Canvas/btn_star').getComponent(Button);\r\n        this.btn_finish=find('Canvas/btn_finish').getComponent(Button);\r\n        this.btn_nextGame = find('Canvas/btn_nextGame').getComponent(Button);\r\n        this.layout_bule=find('Canvas/layout_bule');\r\n        this.layout_red = find('Canvas/layout_red');\r\n        this.item_poker = find('Canvas/item_poker');\r\n        this.avatar_red=find('Canvas/avatar_red');\r\n        this.avatar_bule = find('Canvas/avatar_bule');\r\n        this.bule_laber=this.avatar_bule.getChildByName('score').getComponent(Label);\r\n        this.red_laber=this.avatar_red.getChildByName('score').getComponent(Label);\r\n        this.bule_head=this.avatar_bule.getChildByName('sprite_head').getComponent(Sprite);\r\n        this.red_head=this.avatar_red.getChildByName('sprite_head').getComponent(Sprite);\r\n       \r\n    }\r\n    onEnable () {\r\n        this.btn_star&&this.btn_star.node.on(\"click\",this.onClickHandel,this);\r\n        this.btn_finish&&this.btn_finish.node.on(\"click\",this.onClickHandel,this);\r\n        this.btn_nextGame && this.btn_nextGame.node.on(\"click\", this.onClickHandel, this);\r\n        manage_event.event.on('palyer_act', this.__eventPlayerFunc, this);\r\n        manage_event.event.on('ai_act', this.__eventAiFunc, this);\r\n        \r\n    }\r\n    start() {\r\n        let adree: number = mathematics.randomNum(2, 1);\r\n       \r\n        apic.gameMg.loadRes().then(() => {\r\n            this.updateDate();\r\n        });\r\n    }\r\n    update (deltaTime: number) {\r\n        \r\n    }\r\n    lateUpdate () {\r\n    \r\n    }\r\n    onDisable () {\r\n       this.btn_star&&this.btn_star.node.off(\"click\",this.onClickHandel,this);\r\n        this.btn_finish&&this.btn_finish.node.off(\"click\",this.onClickHandel,this);\r\n        this.btn_nextGame && this.btn_nextGame.node.off(\"click\", this.onClickHandel, this);\r\n        manage_event.event.off('palyer_act', this.__eventPlayerFunc, this);\r\n        manage_event.event.off('ai_act', this.__eventAiFunc, this);\r\n        this.unscheduleAllCallbacks();\r\n        this.playerAct = false;\r\n    }\r\n\r\n    private updateDate() {\r\n        let playerInfo = apic.gameMg.playerInfo;\r\n        let aiInfo = apic.aiMg.aiInfo;\r\n        this.red_laber.string = playerInfo.name + playerInfo.score;\r\n        this.red_head.spriteFrame = apic.resMg.otherSpriteFrames.getSpriteFrame(playerInfo.avatar);\r\n        this.bule_laber.string = aiInfo.name + aiInfo.score;\r\n        this.bule_head.spriteFrame = apic.resMg.otherSpriteFrames.getSpriteFrame(aiInfo.avatar);\r\n    }\r\n\r\n    private onClickHandel(event){\r\n        let name: string = event.node.name;\r\n        this.btn_star.interactable =name=='btn_star'? false:true;\r\n        switch (name) {\r\n            case \"btn_star\":\r\n            case  \"btn_nextGame\":\r\n                if (!apic.resMg.spriteFrames) {\r\n                    apic.gameMg.loadRes().then(() => {\r\n                        this.gameStar();\r\n                    });\r\n                    break;\r\n                }\r\n                this.gameStar();\r\n                break;\r\n            case  \"btn_finish\"  :\r\n                this.gameFinish();\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    private gameFinish() {\r\n        this.layout_bule.removeAllChildren();\r\n        this.layout_red.removeAllChildren();\r\n        apic.pokerMg.init();\r\n        apic.gameMg.isGameFinish = false;\r\n    }\r\n\r\n    private gameStar() {\r\n        this.btn_star.interactable = false;  \r\n        let pokerIndex: number = mathematics.randomNum(10, 5);\r\n        this.gameFinish();\r\n        for (let index = 0; index < 11; index++) {\r\n            let enemy: Node = apic.gameMg.createrPoker();\r\n\r\n            let count:number = mathematics.randomNum(13, 1);\r\n            let flowerColor: number = mathematics.randomNum(4, 1);\r\n\r\n            while ( apic.pokerMg.pokerArr.indexOf(count + '-' + flowerColor)== -1) {\r\n                count = mathematics.randomNum(13, 1);\r\n                flowerColor = mathematics.randomNum(4, 1);\r\n            }\r\n            let pocker: string = count + '-' + flowerColor;\r\n            if (index < 5) {\r\n                apic.pokerMg.pokerBlue.push(pocker);\r\n               \r\n            } else {\r\n                if (pokerIndex == index) {\r\n                    pocker = 'poker';\r\n                }\r\n                \r\n                apic.pokerMg.pokerRed.push(pocker);\r\n                this.updatePokerInfo(enemy,pocker);\r\n            }\r\n            apic.pokerMg.pokerArr.splice(apic.pokerMg.pokerArr.indexOf(count + '-' + flowerColor), 1);\r\n            enemy.getComponent(item_poker).changeData(pocker);\r\n            enemy.parent = index < 5 ? this.layout_bule : this.layout_red;    \r\n        }\r\n        \r\n    }\r\n    private updatePokerInfo(cardNode:Node, itemSpriteFrame:string)\r\n    {\r\n        if (!apic.resMg.spriteFrames) return;\r\n        cardNode.getComponent(Sprite).spriteFrame = apic.resMg.spriteFrames.getSpriteFrame(itemSpriteFrame);\r\n    }\r\n\r\n    private __eventPlayerFunc($node: Node) {\r\n        this.playerAct = true;\r\n        apic.gameMg.isGameFinish = true;\r\n        let indexId: number = null;\r\n        let isPush: boolean = true;\r\n        let pockerName: string = $node.getComponent(item_poker).itemInfo;\r\n        \r\n        if (!pockerName) return;\r\n        for (let index = 0; index < apic.pokerMg.pokerBlue.length; index++) {\r\n            if (apic.pokerMg.pokerBlue[index] == pockerName) {\r\n                indexId = index;\r\n            } \r\n        }\r\n        if (indexId == null) {\r\n            $node&&apic.gameMg.removePoker($node); return;\r\n        }\r\n        for (let index = 0; index < apic.pokerMg.pokerRed.length; index++) {\r\n                let element = apic.pokerMg.pokerRed[index];\r\n             \r\n                if (parseInt(element.split(\"-\")[0])==parseInt(pockerName.split(\"-\")[0])) {\r\n                    \r\n                    let elementCard: Node = this.layout_red.children[index];\r\n                    isPush = false;\r\n                    \r\n                    this.scheduleOnce(() => {\r\n                        apic.pokerMg.pokerRed.splice(index, 1);\r\n                        apic.pokerMg.pokerBlue.splice(indexId, 1);\r\n                        $node&& apic.gameMg.removePoker($node);\r\n                        elementCard&&apic.gameMg.removePoker(elementCard);\r\n            \r\n                     }, 0.8);\r\n                } \r\n        }\r\n        if(isPush){\r\n            apic.pokerMg.pokerRed.push(apic.pokerMg.pokerBlue[indexId]);\r\n            $node.parent = this.layout_red;\r\n            apic.pokerMg.pokerBlue.splice(indexId, 1);\r\n        }\r\n\r\n        this.gameOver(apic.pokerMg.pokerBlue).then(() => {\r\n            apic.aiMg.aiInfo.score += gameDate.gameScore_change;\r\n            this.updateDate();\r\n        });\r\n        //ai\r\n        if (apic.gameMg.isGameFinish) {\r\n            this.scheduleOnce(() => {\r\n                apic.aiMg.aiDrawCard();\r\n            }, 0.2);\r\n        }\r\n\r\n        // console.log(apic.pokerMg.pokerBlue, apic.pokerMg.pokerRed);\r\n       \r\n    }\r\n\r\n    private __eventAiFunc(indexId: number) {\r\n        \r\n        let playerCard: Node = this.layout_red.children[indexId];\r\n        let isPush: boolean = true;\r\n\r\n        let showPoker=(pokerCard:Node,poker:string) => {\r\n            pokerCard.getComponent(Sprite).spriteFrame = apic.resMg.spriteFrames.getSpriteFrame(poker); \r\n        }\r\n        \r\n        if (playerCard) {\r\n            let pokerRedElement = apic.pokerMg.pokerRed[indexId];\r\n            \r\n            if (!pokerRedElement) return;\r\n            for (let index = 0; index < apic.pokerMg.pokerBlue.length; index++) {\r\n                let element = apic.pokerMg.pokerBlue[index];\r\n                \r\n                \r\n                if (!element) return;\r\n                let count: number = parseInt(pokerRedElement.split(\"-\")[0]);\r\n                if (parseInt(element.split(\"-\")[0])==count) {\r\n                    // console.log(\"相同\" + count);\r\n                    let elementCard: Node = this.layout_bule.children[index];\r\n                    isPush = false;\r\n                    showPoker(elementCard, element);\r\n                    // console.log('apic.pokerMg.pokerBlue', apic.pokerMg.pokerBlue, apic.pokerMg.pokerRed);\r\n                    apic.pokerMg.pokerBlue.splice(index, 1);\r\n                    this.scheduleOnce(() => {\r\n                        apic.pokerMg.pokerRed.splice(indexId, 1);\r\n                       playerCard&&  apic.gameMg.removePoker(playerCard);\r\n                       elementCard&& apic.gameMg.removePoker(elementCard);\r\n            \r\n                     }, 0.5);\r\n                  \r\n                } \r\n            }\r\n            if (isPush) {\r\n                apic.pokerMg.pokerBlue.push(pokerRedElement);\r\n                apic.pokerMg.pokerRed.splice(indexId, 1);\r\n                playerCard.parent = this.layout_bule;\r\n                showPoker(playerCard,'poker');\r\n            }\r\n         \r\n           \r\n            this.gameOver(apic.pokerMg.pokerRed).then(() => {\r\n                apic.gameMg.playerInfo.score += gameDate.gameScore_change;\r\n                this.updateDate();\r\n            });\r\n        }\r\n\r\n        //player\r\n      \r\n    }\r\n\r\n    private gameOver(pokerArr: string[]) {\r\n        return new Promise<void>((resolve, reject) => {\r\n            if (pokerArr.length <= 0 || (pokerArr.length == 1 && pokerArr[0] == 'poker')) {\r\n                this.btn_star.interactable = true;\r\n                this.scheduleOnce(() => {\r\n                    this.gameStar();\r\n                },0.8)\r\n               \r\n                resolve();\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    onDestroy () {\r\n        apic.resMg.otherSpriteFrames.decRef();\r\n        apic.resMg.spriteFrames.decRef();\r\n        apic.gameMg.itemPokerPre.decRef();\r\n    }\r\n    \r\n}\r\n\r\n\r\n","//Singleton.ts\r\nexport class Singleton<T> {\r\n    private static instance: any = null;\r\n    public static GetInstance<T>(c: { new(): T }): T\r\n    {\r\n        if (this.instance == null)\r\n        {\r\n            this.instance = new c();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    public init()\r\n    {\r\n        console.dir(this);\r\n    }\r\n}\r\n"]}